//version 0.3.8
import java.util.*;
public class Test {
    public static void main(String[] args) {
        //runAllTests();    //Runs all the tests
        //testPartA();
        //testPartB();
        //testQ1E1();       //Runs tests for 1.1
        //testQ1E2();       //Runs tests for 1.2
        //testQ2E2a();      //Runs tests for 2.2 addFirst
        //testQ2E2b();      //Runs tests for 2.2 addLast
        //testQ2E2c();      //Runs tests for 2.2 removeFirst
        //testQ2E2d();      //Runs tests for 2.2 removeLast
        //testQ2E3();       //Runs tests for 2.3
        //testQ2E4();       //Runs tests for 2.4
    }

    private static void runAllTests() {
        testPartA();
        testPartB();
    }

    private static void testPartA() {
        testQ1E1();
        testQ1E2();
    }

    private static void testPartB() {
        testQ2E2a();
        testQ2E2b();
        testQ2E2c();
        testQ2E2d();
        testQ2E3();
        testQ2E4();
    }

    private static void testQ1E1() {
        boolean passed = true;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            output = Bit.fullAdderSum(inputs[i][0], inputs[i][1], inputs[i][2]);
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ1E2() {
        boolean passed = true;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            output = Bit.fullAdderCarry(inputs[i][0], inputs[i][1], inputs[i][2]);
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2a() {
        boolean passed = true;
        BitList output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"<000>", "<001>", "<010>", "<011>", "<100>", "<101>", "<110>", "<111>"};
        for (int i = 0; i < inputs.length; i++) {
            output = new BitList();
            for (Bit element: inputs[i])
                output.addFirst(element);
            if (!output.toString().equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2b() {
        boolean passed = true;
        BitList output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"<000>", "<100>", "<010>", "<110>", "<001>", "<101>", "<011>", "<111>"};
        for (int i = 0; i < inputs.length; i++) {
            output = new BitList();
            for (Bit element: inputs[i])
                output.addLast(element);
            if (!output.toString().equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2c() {
        boolean passed = true;
        BitList bitList;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ONE, Bit.ZERO, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element: inputs[i])
                bitList.addFirst(element);
            output = bitList.removeFirst();
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2d() {
        boolean passed = true;
        BitList bitList;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element: inputs[i])
                bitList.addFirst(element);
            output = bitList.removeLast();
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E3() {
        boolean passed = true;
        BitList bitList, output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element : inputs[i])
                bitList.addFirst(element);
            output = new BitList(bitList);
            if (!output.equals(bitList)) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + bitList + " But output was: " + output);
            }
            output.addFirst(Bit.ZERO);
            if (output.equals(bitList)) {
                passed = false;
                System.out.println("Failed: Copy isn't a deep copy");
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E4() {
        boolean passed = true;
        BitList output;
        Bit[] inputs = {Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO};
        Boolean[] expectedOutputs = {false, true, true, false, true, true};
        output = new BitList();
        for (int i = 0; i < inputs.length; i++) {
            if (output.isNumber() != (expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + output.toString());
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output.isNumber());
            }
            output.addLast(inputs[i]);
        }
        if (passed)
            System.out.println("Passed all tests");
    }
}
