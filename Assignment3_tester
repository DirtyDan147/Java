import java.math.BigInteger;
import java.util.*;
public class Test {
    public static void main(String[] args) {
        //runAllTests();    //Runs all the tests
        //testQ1E1();       //Runs tests for 1.1
        //testQ1E2();       //Runs tests for 1.2
        //testQ1E3();       //Runs tests for 1.3
        //testQ1E4();       //Runs tests for 1.4, needs parameter n to run n times
        //testQ2E1();       //Runs tests for 2.1
    }

    private static void runAllTests() {
        System.out.println("Testing 1.1: ");
        testQ1E1();
        System.out.println();
        System.out.println("Testing 1.2: ");
        testQ1E2();
        System.out.println();
        System.out.println("Testing 1.3: ");
        testQ1E3();
        System.out.println();
        int n = 2 + (int)(Math.random()*5);
        System.out.println("Testing 1.4 " + n + " times: ");
        testQ1E4(n);
        System.out.println();
        System.out.println("Testing 2.1: ");
        testQ2E1();
        System.out.println();
    }

    private static void testQ1E1 (){
        boolean passed = true;
        BigInteger input;
        BigInteger output;
        BigInteger expectedOutput;
        String[] inputs = {"-10", "0", "7", "99999"};
        String[] expectedOutputs = {"0", "0", "21", "4999850001"};
        for (int i = 0; i < inputs.length; i++) {
            input = new BigInteger(inputs[i]);  //input
            expectedOutput = new BigInteger(expectedOutputs[i]);    //expected result
            output = Part1_BigInteger.sumSmaller(input);
            if (!output.equals(expectedOutput)){
                passed = false;
                System.out.println("Failed on input: " + input);
                System.out.println("Expected output: " + expectedOutput + " But output was: " + output.toString());
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ1E2 (){
        int n = (int) (Math.random()*11);
        System.out.println("Expected " + n + " random integers");
        Part1_BigInteger.printRandoms(n);
    }

    private static void testQ1E3 (){
        boolean passed = true;
        BigInteger input;
        boolean output;
        boolean expectedOutput;
        String[] inputs = {"274876858367", "4398042316799", "3576702497","5915587277"};
        boolean[] expectedOutputs = {true, true, false, true};
        for (int i = 0; i < inputs.length; i++) {
            input = new BigInteger(inputs[i]);  //input
            expectedOutput = expectedOutputs[i];    //expected result
            output = Part1_BigInteger.isPrime(input);
            if (output != expectedOutput){
                passed = false;
                System.out.println("Failed on input: " + input);
                System.out.println("Expected output: " + expectedOutput + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ1E4 (int timesToTest){
        boolean passed = true;
        BigInteger bi, twoToThePowerOfN;
        for (int i = 0; i < timesToTest; i++) {
            int n = 50+ (int) (Math.random()*51) ;
            twoToThePowerOfN = twoToThePowerOfN(n);
            bi = Part1_BigInteger.randomPrime(n);
            if (!Part1_BigInteger.isPrime(bi)){
                passed = false;
                System.out.println("Failed: The returned number " +bi + " isn't prime according to your function Part1_BigInteger.isPrime");
            }
            if (bi.compareTo(twoToThePowerOfN) != -1){
                passed = false;
                System.out.println("Failed: The returned number " +bi + " isn't smaller than 2^" + n + "=" + twoToThePowerOfN);
            }
            if (bi.compareTo(BigInteger.ONE) != 1){
                passed = false;
                System.out.println("Failed: The returned number " +bi + " isn't bigger than 1");
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static BigInteger twoToThePowerOfN (int n){
        byte[] bits;
        byte activeBit = 1;
        int count = 1 + (n / 8);
        for (int i = 0; i < n%8; i++) {
            activeBit *= 2;
        }
        if (activeBit < 0) {
            count += 1;
            bits = new byte[count];
            bits[1] = activeBit;
        }
        else {
            bits = new byte[count];
            bits[0] = activeBit;
        }
        return new BigInteger(bits);
    }

    private static void testQ2E1 (){
        boolean passed = true;
        int[] input;
        int input2;
        boolean output;
        boolean expectedOutput;
        int[][] inputs = {{8,9}, {2,5,10}, {2,5,10}, {2,10,20,100}};
        int[] inputs2 = {59, 13, 16, 15};
        boolean[] expectedOutputs = {true, true, true, false};
        for (int i = 0; i < inputs.length; i++) {
            input = inputs[i];  //input
            input2 = inputs2[i];
            expectedOutput = expectedOutputs[i];    //expected result
            output = Part1_Change.change(input, input2);
            if (output != expectedOutput){
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(input) +" , " + input2);
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }
}
